/******************************************************************************
LTR303 + FastLED Arduino
For UCA21
Fabien Ferrero
Aug, 2021

Resources:
Uses Wire.h for i2c operation

Distributed as-is; no warranty is given.

Use LTR303 light sensor

Objective : This code will :
    * plot on the serial port the 2 light value of the accelerometer +  luminosity
    * use the LED to illustrate the luminosity from accelerometer
******************************************************************************/

// Your sketch must #include this library, and the Wire library
// (Wire is a standard library included with Arduino):

#include <LTR303.h>
#include <Wire.h>

// Create an LTR303 object, here called "light":
LTR303 light;

// Global variables:
unsigned char gain;     // Gain setting, values = 0-7 
unsigned char integrationTime;  // Integration ("shutter") time in milliseconds
unsigned char measurementRate;  // Interval between DATA_REGISTERS update

void setup() {
  delay(3000); // power-up safety delay
  // Initialize the Serial port:
  Serial.begin(115200);

  // Initialize the LTR303 library
  // 100ms 	initial startup time required
  delay(100);

  // You can pass nothing to light.begin() for the default I2C address (0x29)
  light.begin();

  // Get factory ID from sensor:
  // (Just for fun, you don't need to do this to operate the sensor)
  unsigned char ID;
  if (light.getPartID(ID)) {
  }
  else {
    byte error = light.getError();
    printError(error);
  }

  // Gain can take any value from 0-7, except 4 & 5
  // If gain = 0, device is set to 1X gain (default)
  gain = 0;
  light.setControl(gain, false, false);

  // If integrationTime = 1, integrationTime will be 50ms
  integrationTime = 1;
  light.setMeasurementRate(integrationTime, 3);

  // To start taking measurements, power up the sensor:
  light.setPowerUp();

  Serial.println("Data0:,Data1:,Lux:");   // Plot labels
}

void loop() {
  // Wait between measurements before retrieving the result
  int ms = 50;
  delay(ms);

  // Retrieve the data from the device:
  unsigned int data0, data1;
  double lux;    // Resulting lux value
  boolean good;  // True if neither sensor is saturated

  if (light.getData(data0, data1)) {
    // getData() returned true, communication was successful
    Serial.print(data1);
    Serial.print(" ");
    Serial.print(data0);
    Serial.print(" ");

    // Perform lux calculation:
    good = light.getLux(gain, integrationTime, data0, data1, lux);

    // Print out the results:
    Serial.println(lux);
  }
  else {
    // getData() returned false because of an I2C error, inform the user.
    byte error = light.getError();
    printError(error);
  }
}

void printError(byte error) {
  // If there's an I2C error, this function will
  // print out an explanation.

  Serial.print("I2C error: ");
  Serial.print(error, DEC);
  Serial.print(", ");
  
  switch (error) {
    case 0:
      Serial.println("success");
      break;
    case 1:
      Serial.println("data too long for transmit buffer");
      break;
    case 2:
      Serial.println("received NACK on address (disconnected?)");
      break;
    case 3:
      Serial.println("received NACK on data");
      break;
    case 4:
      Serial.println("other error");
      break;
    default:
      Serial.println("unknown error");
  }
}
